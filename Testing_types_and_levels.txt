Классификация тестирования:

		1. По уровню детализации (уровни тестирования).

	1)Компонентное тестирование (Component or Unit Testing) – это тестирование программы на уровне отдельно взятых модулей, функций или классов.

Цель компонентного тестирования: выявление локализованных в модуле ошибок в реализации алгоритмов, а также определение степени готовности системы к переходу на следующий уровень разработки и тестирования.

При компонентном тестировании проводятся unit-тесты
Unit-тесты - тесты, проверяющие корректность работы отдельных модулей программы.

	2)Интеграционное тестирование проверяет интерфейсы между компонентами, взаимодействие различных частей системы, таких как операционная системы, файловая система, аппаратное обеспечение, и интерфейсы между системами.
Интеграционные тесты - тесты, проверяющие корректность взаимодействия отдельных модулей друг с другом.

Уровни интеграционного тестирования:
Компонентный интеграционный уровень (Component Integration testing) проверяется взаимодействие между компонентами системы после проведения
компонентного тестирования.
Системный интеграционный уровень (System Integration Testing) - проверяется взаимодействие между разными системами после проведения системного тестирования

Подходы к интеграционному тестированию
● Снизу вверх (Bottom Up Integration)
● Сверху вниз (Top Down Integration)
● Большой взрыв (“Big Bang” Integration)

	3)Системное тестирование

Основной задачей системного тестирования является проверка как функциональных, так и не функциональных требований в системе в целом.

Подходы к системному тестированию:
● На базе требований (requirements based)
● На базе случаев использования (use case based)

	4)Приемочное тестирование - Формальный процесс тестирования, который проверяет работоспособность системы, частей системы или отдельных нефункциональных характеристик системы и проводится с целью:

● определения, удовлетворяет ли система приемочным критериям;
● вынесения решения заказчиком или другим уполномоченным лицом, принимается приложение или нет.

Виды приемочного тестирования:
● Пользовательское приемочное тестирование
● Эксплуатационное (приемочное) тестирование
● Контрактное и правовое приемочное тестирование
● Альфа и бета тестирование (или тестирование в условиях эксплуатации)

		2. По запуску кода
		
	Статические методы:
Рецензирование – вид тестирования ПО (включая код), который может проводиться перед динамическим тестированием. Осуществляется без запуска приложения.

Рецензирование может проводится для любого продукта, связанного с разработкой ПО, включая:
– спецификации требований и дизайна,
– код,
– планы тестирования,
– руководства пользования и т.п

Статический анализ – это исследование ПО с помощью специального инструмента без его запуска.

Инструментальные средства статического анализа анализируют:
– код программы (например, потоки управления и поток данных);
– сгенерированный код, например HTML, XML;

общая цель – обнаружение дефектов.
Методы дополняют друг друга, так как с разной эффективностью находятт различные типы дефектов. В отличие от динамического тестирования статические методы находят причины сбоя (дефекты), а не сами отказы.

	Динамические методы
Динамические методы тестирования подразумевают запуск программы.

		3. По доступу к коду и архитектуре приложения (методы)
		
1) Методы черного ящика (black box testing)
	- Функциональное тестирование. Тестирование на соответствие программного продукта требованиям без знания внутренней структуры реализации системы.
2) Методы белого ящика (white/glass box testing)
	- Структурное тестирование. Тестирование на соответствие программного продукта требованиям со знанием внутренней структуры реализации системы (есть в наличии исходный код и технические (есть в наличии исходный код и технические проводить локализацию ошибок, анализ надежности и устойчивости и другие типы проверок, существенно повышая качество системы.
3) Методы серого ящика (grey box testing)
	- Комбинирование методов белого и черного ящика. При тестировании серого ящика разработчик теста имеет доступ к исходному коду, но при непосредственном выполнении тестов доступ к коду, как правило, не требуется.
	
		4. По степени важности тестовых функций (тестирование изменений)

	Дымовое тестирование (Smoke Testing) – это короткий цикл тестов, выполняемый для подтверждения того, что после сборки кода (нового или исправленного) устанавливаемое приложение стартует и выполняет основные функции.

	Тестирование сборки (Build verification Testing)  – это тестирование, направленное на определение соответствия выпущенной версии критериям качества для начала тестирования.
	
	Повторное (подтверждающее) тестирование (Re-testing)
	Тестирование, во время которого исполняются тестовые сценарии, выявившие ошибки во время последнего запуска, для подтверждения успешности исправления этих ошибок.

	Регрессионное тестирование (Regression Testing)
	Это вид тестирования направленный на проверку изменений, сделанных в приложении или окружающей среде (починка дефекта, слияние кода, миграция на другую операционную систему, базу данных, веб-сервер или сервер приложения), для подтверждения того факта, что существующая ранее функциональность работает как и прежде. 
	
	Санитарное тестирование или проверка согласованности/ исправности (Sanity Testing)
	Это узконаправленное тестирование достаточное для доказательства того, что конкретная функция работает согласно заявленным в спецификации требованиям. 
	
	Является подмножеством регрессионного тестирования. Используется для определения работоспособности определенной части приложения после изменений произведенных в ней или окружающей среде. Обычно выполняется вручную.
	
В некоторых источниках ошибочно полагают, что санитарное и дымовое тестирование – это одно и тоже. Но эти виды тестирования имеют “вектора движения”, направления в разные стороны. 
В отличии от дымового
(Smoke testing), санитарное тестирование (Sanity testing) направлено вглубь проверяемой функции, в то время как дымовое направлено вширь, для покрытия тестами как можно большего функционала в кратчайшие сроки.

		5. По степени автоматизации
	
	Ручное тестирование (Manual testing) – тестирование без использования программных средств для проверки путем моделирования действий пользователей. 
	
	Полуавтоматизированное тестирование (Semiautomated testing) сочетает ручной подход с автоматизированным. 
	
	Автоматизированное тестирование (Automated testing) предусматривает использование программных средств для выполнения тестов и проверки их результатов. 
	
		6. По принципу работы с приложениями (позитивное, негативное)
	
	Позитивное тестирование – это тестирование на данных или сценариях, которые соответствуют нормальному штатному поведению систем.

Цель: Основной целью “позитивного” тестирования является проверка того, что при помощи системы можно делать то, для чего она создавалась.

	Негативное тестирование – это тестирование на данных или сценариях, которые соответствуют нештатному поведению тестируемой системы – различные сообщения об ошибках, исключительные ситуации “запредельные” состояния и тп.
	
Цель: Основной целью “негативного” тестирования является проверка устойчивости системы к воздействиям различного рода, валидация неверного набора данных, проверка обработки исключительных ситуаций.